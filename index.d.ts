import * as proxyIntegration from './lib/proxyIntegration';
import * as sns from './lib/sns';
import * as sqs from './lib/sqs';
import * as s3 from './lib/s3';
import { Context } from 'aws-lambda';
export interface RouteConfig {
    proxyIntegration?: proxyIntegration.ProxyIntegrationConfig;
    sns?: sns.SnsConfig;
    sqs?: sqs.SqsConfig;
    s3?: s3.S3Config;
    debug?: boolean;
    onError?: ErrorHandler;
}
export declare type ErrorHandler<TContext extends Context = Context> = (error?: Error, event?: RouterEvent, context?: TContext) => Promise<any> | any | void;
export declare type RouterEvent = ProxyIntegrationEvent | SnsEvent | SqsEvent | S3Event;
export declare type ProxyIntegrationEvent = proxyIntegration.ProxyIntegrationEvent;
export declare type ProxyIntegrationRoute = proxyIntegration.ProxyIntegrationRoute;
export declare type ProxyIntegrationConfig = proxyIntegration.ProxyIntegrationConfig;
export declare type ProxyIntegrationResult = proxyIntegration.ProxyIntegrationResult;
export declare type ProxyIntegrationError = proxyIntegration.ProxyIntegrationError;
export declare type ProxyIntegrationErrorMapping = proxyIntegration.ProxyIntegrationErrorMapping;
export declare type SnsEvent = sns.SnsEvent;
export declare type SnsRoute = sns.SnsRoute;
export declare type SnsConfig = sns.SnsConfig;
export declare type SqsEvent = sqs.SqsEvent;
export declare type SqsRoute = sqs.SqsRoute;
export declare type SqsConfig = sqs.SqsConfig;
export declare type S3Event = s3.S3Event;
export declare type S3Route = s3.S3Route;
export declare type S3Config = s3.S3Config;
export declare const handler: (routeConfig: RouteConfig) => <TContext extends Context>(event: RouterEvent, context: TContext) => Promise<any>;
